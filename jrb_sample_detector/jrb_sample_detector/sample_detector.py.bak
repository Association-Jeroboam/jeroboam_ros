import rclpy
from rclpy.node import Node
from rclpy.time import Time

from geometry_msgs.msg import PoseStamped
from std_msgs.msg import Header



class SampleDetector(Node):

    def __init__(self):
        super().__init__('sample_detector')
        self.publisher_ = self.create_publisher(PoseStamped, 'detected_samples', 10)
        timer_period = 0.5  # seconds
        self.timer = self.create_timer(timer_period, self.timer_callback)
        self.i = 0

    def timer_callback(self):
        msg = PoseStamped()
        #msg.header = Header()
        msg.header.stamp = self.get_clock().now().to_msg()
        msg.header.frame_id = "rock" #sample type
        msg.pose.position.x = float(self.i)
        self.publisher_.publish(msg)
        self.get_logger().info('Publishing: "%s"' % msg.header)
        self.i += 1


def main(args=None):
    rclpy.init(args=args)

    sample_detector = SampleDetector()

    rclpy.spin(sample_detector)

    # Destroy the node explicitly
    # (optional - otherwise it will be done automatically
    # when the garbage collector destroys the node object)
    sample_detector.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()