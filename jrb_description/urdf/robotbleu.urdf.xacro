<?xml version="1.0"?>
<robot name="robotbleu"
  xmlns:xacro="http://ros.org/wiki/xacro">

    <!-- <xacro:include filename="arm.urdf.xacro" /> -->
    <xacro:include filename="colors.xacro" />
    <xacro:include filename="inertial.xacro" />

    <xacro:arg name="display_meshes" default="True"/>

    <xacro:property name="chassis_length" value="0.2"/>
    <xacro:property name="chassis_width" value="0.275"/>
    <xacro:property name="chassis_height" value="0.006"/>
    <xacro:property name="chassis_mass" value="1.0"/>

    <xacro:property name="carter_length" value="0.17"/>
    <xacro:property name="carter_width" value="0.275"/>
    <xacro:property name="carter_height" value="0.33"/>
    <xacro:property name="carter_mass" value="0.1"/>
    <xacro:property name="carter_offset_x" value="0.045"/>

    <xacro:property name="wheel_radius" value="0.0254"/>
    <xacro:property name="wheel_thickness" value="0.018"/>
    <xacro:property name="wheel_mass" value="0.05"/>
    <xacro:property name="wheel_offset_x" value="0.0"/>
    <xacro:property name="wheel_offset_y" value="0.08316"/>
    <xacro:property name="wheel_offset_z" value="0.0"/>

    <xacro:property name="caster_wheel_radius" value="0.008"/>
    <xacro:property name="caster_wheel_mass" value="0.01"/>
    <xacro:property name="caster_wheel_offset_x" value="0.085"/>
    <xacro:property name="caster_wheel_offset_z" value="${wheel_offset_z - wheel_radius + caster_wheel_radius}"/>

    <xacro:property name="lidar_height" value="0.37733"/>

    <!-- BASE LINK -->
    <link name="base_link">
    </link>

    <!-- BASE_FOOTPRINT LINK -->
    <joint name="base_footprint_joint" type="fixed">
        <parent link="base_link"/>
        <child link="base_footprint"/>
        <origin xyz="0.0 0.0 0" rpy="0 0 0"/>
    </joint>

    <link name="base_footprint">
    </link>
    
    <!-- CHASSIS LINK -->
    <joint name="chassis_joint" type="fixed">
        <parent link="base_link"/>
        <child link="chassis"/>
        <origin xyz="${-wheel_offset_x} 0 ${wheel_radius-wheel_offset_z}"/>
    </joint>

    <link name="chassis">
        <visual>
            <xacro:if value="$(arg display_meshes)">
                <origin xyz="0 0 ${-chassis_height/2}" rpy="0 0 ${pi}"/>
                <geometry>
                    <mesh filename="package://jrb_description/urdf/meshes/base.STL" />
                </geometry>
            </xacro:if>
            <xacro:unless value="$(arg display_meshes)">
                <origin xyz="0 0 ${-chassis_height/2}"/>
                <geometry>
                    <box size="${chassis_length} ${chassis_width} ${chassis_height}"/>
                </geometry>
            </xacro:unless>
            <material name="orange"/>
        </visual> 
        <collision>
            <origin xyz="0 0 ${-chassis_height/2}"/>
            <geometry>
                <box size="${chassis_length} ${chassis_width} ${chassis_height}"/>
            </geometry>
        </collision>
        <xacro:inertial_box mass="0.5" x="${chassis_length}" y="${chassis_width}" z="${chassis_height}">
            <origin xyz="0 0 ${chassis_height/2}" rpy="0 0 0"/>
        </xacro:inertial_box>
    </link>

    <!-- CARTER LINK -->
    <joint name="carter_joint" type="fixed">
        <parent link="chassis"/>
        <child link="carter"/>
        <origin xyz="0 0 0"/>
    </joint>

    <link name="carter">
        <visual>
            <xacro:if value="$(arg display_meshes)">
                <geometry>
                    <mesh filename="package://jrb_description/urdf/meshes/carter.STL" />
                </geometry>
            </xacro:if>
            <xacro:unless value="$(arg display_meshes)">
                <origin xyz="${-(chassis_length-carter_length)/2} 0 ${carter_height/2}"/>
                <geometry>
                    <box size="${carter_length} ${carter_width} ${carter_height}"/>
                </geometry>
            </xacro:unless>
            <material name="yellow"/>
        </visual> 
        <collision>
            <origin xyz="${-(chassis_length-carter_length)/2} 0 ${carter_height/2}"/>
            <geometry>
                <box size="${carter_length} ${carter_width} ${carter_height}"/>
            </geometry>
        </collision>
        <xacro:inertial_box mass="0.5" x="${carter_length}" y="${carter_width}" z="${carter_height}">
            <origin xyz="0 0 ${carter_height/2}" rpy="0 0 0"/>
        </xacro:inertial_box>
    </link>

    <!-- LEFT WHEEL LINK -->
    <joint name="left_wheel_joint" type="continuous">
        <parent link="chassis"/>
        <child link="left_wheel"/>
        <origin xyz="0 ${wheel_offset_y} ${wheel_offset_z}" rpy="-${pi/2} 0 0" />
        <axis xyz="0 0 1"/>
    </joint>

    <link name="left_wheel">
        <visual>
            <xacro:if value="$(arg display_meshes)">
                <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
                <geometry>
                    <mesh filename="package://jrb_description/urdf/meshes/roue.STL" />
                </geometry>
                <material name="blue"/>
            </xacro:if>
            <xacro:unless value="$(arg display_meshes)">
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_thickness}"/>
                </geometry>
            </xacro:unless>
            <material name="blue"/>
        </visual>
        <collision>
            <geometry>
                <sphere radius="${wheel_radius}"/>
            </geometry>
        </collision>
        <xacro:inertial_cylinder mass="${wheel_mass}" length="${wheel_thickness}" radius="${wheel_radius}">
            <origin xyz="0 0 0" rpy="0 0 0"/>
        </xacro:inertial_cylinder>
    </link>

    <!-- RIGHT WHEEL LINK -->
    <joint name="right_wheel_joint" type="continuous">
        <parent link="chassis"/>
        <child link="right_wheel"/>
        <origin xyz="0 ${-wheel_offset_y} ${wheel_offset_z}" rpy="${pi/2} 0 0" />
        <axis xyz="0 0 -1"/>
    </joint>

    <link name="right_wheel">
        <visual>
            <xacro:if value="$(arg display_meshes)">
                <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
                <geometry>
                    <mesh filename="package://jrb_description/urdf/meshes/roue.STL" />
                </geometry>
                <material name="blue"/>
            </xacro:if>
            <xacro:unless value="$(arg display_meshes)">
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_thickness}"/>
                </geometry>
            </xacro:unless>
            <material name="blue"/>
        </visual>
        <collision>
            <geometry>
                <sphere radius="${wheel_radius}"/>
            </geometry>
        </collision>
        <xacro:inertial_cylinder mass="${wheel_mass}" length="${wheel_thickness}" radius="${wheel_radius}">
            <origin xyz="0 0 0" rpy="0 0 0"/>
        </xacro:inertial_cylinder>
    </link>

    <!-- FRONT CASTER WHEEL LINK -->
    <joint name="front_caster_wheel_joint" type="fixed">
        <parent link="chassis"/>
        <child link="front_caster_wheel"/>
        <origin xyz="${caster_wheel_offset_x} 0 ${caster_wheel_offset_z}"/>
    </joint>

    <link name="front_caster_wheel">
        <visual>
            <geometry>
                <sphere radius="${caster_wheel_radius}"/>
            </geometry>
            <material name="white"/>
        </visual>
        <collision>
            <geometry>
                <sphere radius="${caster_wheel_radius}"/>
            </geometry>
        </collision>
        <xacro:inertial_sphere mass="${caster_wheel_mass}" radius="${caster_wheel_radius}">
            <origin xyz="0 0 0" rpy="0 0 0"/>
        </xacro:inertial_sphere>
    </link>

    <!-- BACK CASTER WHEEL LINK -->
    <joint name="back_caster_wheel_joint" type="fixed">
        <parent link="chassis"/>
        <child link="back_caster_wheel"/>
        <origin xyz="${-caster_wheel_offset_x} 0 ${caster_wheel_offset_z}"/>
    </joint>

    <link name="back_caster_wheel">
        <visual>
            <geometry>
                <sphere radius="${caster_wheel_radius}"/>
            </geometry>
            <material name="white"/>
        </visual>
        <collision>
            <geometry>
                <sphere radius="${caster_wheel_radius}"/>
            </geometry>
        </collision>
        <xacro:inertial_sphere mass="${caster_wheel_mass}" radius="${caster_wheel_radius}">
            <origin xyz="0 0 0" rpy="0 0 0"/>
        </xacro:inertial_sphere>
    </link>

    <!-- LEFT TAG LINK -->
    <joint name="left_tag_joint" type="fixed">
        <parent link="chassis"/>
        <child link="left_tag_link"/>
        <origin xyz="0.091 0.0925 0.0" rpy="0 0 0"/>
    </joint>

    <link name="left_tag_link">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
                <geometry>
                    <mesh filename="package://jrb_description/urdf/meshes/tag/tag_left.dae" />
                </geometry>
        </visual>
    </link>

    <!-- RIGHT TAG LINK -->
    <joint name="right_tag_joint" type="fixed">
        <parent link="chassis"/>
        <child link="right_tag_link"/>
        <origin xyz="0.091 -0.0925 0.0" rpy="0 0 0"/>
    </joint>

    <link name="right_tag_link">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
                <geometry>
                    <mesh filename="package://jrb_description/urdf/meshes/tag/tag_right.dae" />
                </geometry>
        </visual>
    </link>

    <xacro:include filename="lidar.xacro" />
    <xacro:include filename="camera.xacro" />

    <xacro:include filename="gazebo.xacro" />
    <xacro:include filename="gazebo_control.xacro" /> 
</robot>